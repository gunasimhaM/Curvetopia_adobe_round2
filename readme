Shape Detection and Regularization from 2D Point Clusters

Overview

This project involves the development of a Python-based pipeline for detecting and regularizing geometric shapes (circles, ellipses, rectangles, lines, polygons, and stars) from 2D point clusters extracted from CSV files. The goal is to process point data representing different shapes, cluster them using DBSCAN (Density-Based Spatial Clustering of Applications with Noise), and then apply shape-specific algorithms to regularize the points into idealized geometric forms.


Key Components


Data Input and Preprocessing

CSV File Reading: The project begins by loading 2D point data from a CSV file using numpy. The CSV file is expected to contain multiple sets of points, each potentially representing different shapes. The data is grouped and organized based on unique identifiers in the CSV, allowing the script to distinguish between different shapes.
Reshaping Points: The points are converted into a standardized NumPy array format, ensuring they are ready for further processing.

Point Clustering:

DBSCAN Clustering: To distinguish different shapes within the dataset, the DBSCAN algorithm is employed. DBSCAN is effective in identifying clusters of points while treating outliers as noise. Each identified cluster is assumed to represent a distinct geometric shape.

Shape Detection and Regularization:

Circle Detection: Uses the RANSAC (Random Sample Consensus) algorithm with a CircleModel to identify and regularize points into a circle by estimating the center and radius.

Ellipse Detection: Similar to circle detection but applies an EllipseModel to fit an ellipse to the point data.

Rectangle/Square Detection: Identifies the bounding box of the points and derives corner coordinates to regularize the shape into a rectangle or square.
Line Detection: RANSAC with LineModelND is used to fit lines to the point clusters, regularizing them into straight lines.

Polygon Detection: For polygons, the points are adjusted to form regular polygons (e.g., pentagons) based on the calculated centroid and radius.
Star Shape Detection: Specifically handles point clusters that form star-like shapes by generating points that correspond to the vertices of a star.



Visualization:


Matplotlib Visualization: The final step involves visualizing the regularized shapes using matplotlib. Each shape is plotted in different colors and labeled accordingly to distinguish between circles, ellipses, rectangles, lines, polygons, and stars.
Path Simplification, Occlusion Filling, Connectivity Analysis, and SVG Generation
This project focuses on processing and analyzing 2D geometric paths, specifically working with polylines represented by sequences of (x, y) coordinates. The core functionalities include simplifying these paths using the Ramer-Douglas-Peucker (RDP) algorithm, filling occlusions in the shapes, analyzing the connectivity of the resulting paths, and generating SVG images of the processed paths. The project is designed to handle tasks such as ensuring shape connectivity after occlusion filling and generating smooth curves for visualization.


Key Components:


RDP Path Simplification (rdp_simplify):
Simplifies a set of polylines using the Ramer-Douglas-Peucker algorithm, which reduces the number of points in each polyline while preserving the overall shape within a 
specified tolerance (epsilon).

Occlusion Filling (fill_occlusions):

Processes the simplified paths and fills any concave or missing parts by calculating the convex hull for each shape. This step is crucial for ensuring that the resulting shapes are more regular and potentially connected.

Bezier Curve Fitting (fit_bezier_curve):

Fits smooth Bezier curves to the simplified polylines, which are then used for plotting. This provides a smoother and more visually appealing representation of the paths.

Connectivity Analysis (analyze_connectivity):

Analyzes the connectivity of the paths by converting them into geometric polygons using the Shapely library. 

